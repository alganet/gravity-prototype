<?php

namespace Supercluster\Gravity;

use Composer\Script\Event;

/**
 * Search for configuration files in vendor packages
 */
class Installer
{
    protected $file = "supercluster.ini";
    protected $lock = "supercluster.package.ini";
    protected $defaultKeys = ['boot' , 'load', 'pre'];
    protected $keys;

    public static function packageChange(Event $event)
    {
        $vendors = $event->getComposer()->getConfig()->get('vendor-dir');
        $installer = new static();
        return $installer->discoverPackages($vendors);
    }

    protected function setupKeys()
    {
        // Add exports to the default keys
        $this->defaultKeys = array_merge(
            $this->keys['exports'],
            $this->defaultKeys
        );

        // Ensures all keys are initialized
        foreach ($this->defaultKeys as $exportName) {
            if (!isset($this->keys[$exportName])) {
                $this->keys[$exportName] = array();
            }
        }

    }

    protected function collectExports($vendorsDir)
    {
        $bootFiles  = glob("{$vendorsDir}/*/*/{$this->file}");
        foreach ($bootFiles as $bootedPackageFile) {
            $bootedPackageFile = realpath($bootedPackageFile);
            $this->keys['boot'][] = basename($vendorsDir) . str_replace(
                DIRECTORY_SEPARATOR,
                '/',
                mb_substr($bootedPackageFile, mb_strlen($vendorsDir))
            );

            $packageBootList = parse_ini_file($bootedPackageFile, true);

            foreach ($this->keys['exports'] as $exportName) {
                if ( ! isset($packageBootList[$exportName])) {
                    continue;
                }

                foreach ($packageBootList[$exportName] as $p) {
                    $this->keys[$exportName][] = $p;
                }
            }

        }
    }

    public function discoverPackages($vendorsDir)
    {
        $this->keys = parse_ini_file("./{$this->file}", true);

        // Check if the exports key exists
        if (!isset($this->keys['exports'])) {
            $this->keys['exports'] = array();
        }

        $this->setupKeys();

        // Collect the exports from other packages
        $this->collectExports($vendorsDir);


        $this->write();
    }

    public function write()
    {
        // Lock file header
        $bootChanged =  "; Boot File - Auto-generated by Supercluster\\Gravity\\Installer\n";
        $bootChanged .= "; See: supercluster.ini\n\n";

        // Write down the exports
        foreach ($this->defaultKeys as $exportName) {
            foreach ($this->keys[$exportName] as $exportedKey) {
                $bootChanged .= "${exportName}[] = $exportedKey\n";
            }

            $bootChanged .= "\n";
        }

        // Pass additional global data
        foreach ($this->keys as $bootKey => $bootValue) {
            if (!is_string($bootValue)) {
                continue;
            }
            $bootChanged .= "$bootKey = $bootValue\n";
        }

        // Write it
        file_put_contents("./{$this->lock}", $bootChanged);
    }
}
